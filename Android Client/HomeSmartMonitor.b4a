Build1=Default,cloyd.smart.home.monitor
File1=0.png
File10=Main.bal
File11=ScrollViewBasement.bal
File12=TempHumidityBasement.bal
File2=1.bal
File3=1ScrollView.bal
File4=2.bal
File5=AirQualityBasement.bal
File6=chart.bal
File7=cloyd.png
File8=compiletime.txt
File9=crysta.ttf
FileGroup1=Default Group
FileGroup10=Default Group
FileGroup11=Default Group
FileGroup12=Default Group
FileGroup2=Default Group
FileGroup3=Default Group
FileGroup4=Default Group
FileGroup5=Default Group
FileGroup6=Default Group
FileGroup7=Default Group
FileGroup8=Default Group
FileGroup9=Default Group
Group=Default Group
Library1=ahpreferenceactivity
Library10=dateutils
Library11=javaobject
Library12=jmqtt
Library13=network
Library14=notificationbuilder
Library15=notificationlistener
Library16=okhttputils2
Library17=phone
Library18=randomaccessfile
Library19=reflection
Library2=androidplot_0_6_2
Library20=runtimepermissions
Library21=sql
Library22=tabstripviewpager
Library23=xcustomlistview
Library24=xmllayoutbuilder
Library25=xui
Library26=xui views
Library3=appcompat
Library4=b4xcollections
Library5=b4xencryption
Library6=bitmapcreator
Library7=byteconverter
Library8=callsubutils
Library9=core
ManifestCode=AddManifestText(~\n~<uses-sdk android:minSdkVersion="7" android:targetSdkVersion="29"/>~\n~<supports-screens android:largeScreens="true" ~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>)~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~'End of default text.~\n~~\n~SetApplicationAttribute(android:theme, "@style/MyAppTheme")~\n~CreateResource(values, colors.xml,~\n~<resources>~\n~    <color name="actionbar">#90a4ae</color>~\n~   <color name="statusbar">#62757f</color>~\n~   <color name="textColorPrimary">#000000</color>~\n~   <color name="navigationBar">#90a4ae</color>~\n~</resources>~\n~)~\n~CreateResource(values, theme.xml,~\n~<resources>~\n~    <style name="MyAppTheme" parent="Theme.AppCompat.Light">~\n~        <item name="colorPrimary">@color/actionbar</item>~\n~        <item name="colorPrimaryDark">@color/statusbar</item>~\n~       <item name="android:textColorPrimary">@color/textColorPrimary</item>~\n~       <item name="android:navigationBarColor">@color/navigationBar</item>~\n~       <item name="windowNoTitle">true</item>~\n~       <item name="windowActionBar">false</item>~\n~       <item name="windowActionModeOverlay">true</item>~\n~    </style>~\n~	<style name="ToolbarMenu" parent="Base.ThemeOverlay.AppCompat.ActionBar">~\n~	    <item name="android:textColorPrimary">#000000</item>~\n~	    <item name="android:colorBackground">#B0BEC5</item>~\n~    </style>~\n~</resources>~\n~)~\n~~\n~AddApplicationText(~\n~<service android:name="anywheresoftware.b4a.objects.NotificationListenerWrapper"~\n~   android:label="Smart Home Monitor"~\n~  android:permission="android.permission.BIND_NOTIFICATION_LISTENER_SERVICE">~\n~  <intent-filter>~\n~  <action android:name="android.service.notification.NotificationListenerService" />~\n~  </intent-filter>~\n~</service>)~\n~~\n~AddApplicationText(~\n~<activity~\n~  android:name="de.amberhome.objects.preferenceactivity"~\n~  android:theme="@android:style/Theme.Material.Light">~\n~</activity>~\n~)~\n~~\n~AddManifestText(~\n~<uses-permission~\n~  android:name="android.permission.WRITE_EXTERNAL_STORAGE"~\n~  android:maxSdkVersion="19" />~\n~)~\n~~\n~AddApplicationText(~\n~  <provider~\n~  android:name="android.support.v4.content.FileProvider"~\n~  android:authorities="$PACKAGE$.provider"~\n~  android:exported="false"~\n~  android:grantUriPermissions="true">~\n~  <meta-data~\n~  android:name="android.support.FILE_PROVIDER_PATHS"~\n~  android:resource="@xml/provider_paths"/>~\n~  </provider>~\n~)~\n~CreateResource(xml, provider_paths,~\n~   <files-path name="name" path="shared" />~\n~)~\n~~\n~SetApplicationAttribute(android:largeHeap, "true")
Module1=B4XPageIndicator
Module10=SmartHomeMonitor
Module11=Starter
Module12=StateManager
Module2=Badger
Module3=Chart
Module4=cMediaData
Module5=FileProvider
Module6=Gauge
Module7=KeyValueStore
Module8=MJPEG
Module9=NotificationService
NumberOfFiles=12
NumberOfLibraries=26
NumberOfModules=12
Version=9.801
@EndOfDesignText@
'***************************************************************************** 
' ************************ COMPILE IN PERSONAL LAPTOP ************************ 
'*****************************************************************************

#Region  Project Attributes 
	#ApplicationLabel: Smart Home Monitor
	#VersionCode: 2088
	#VersionName: 2.0.8.8
	'SupportedOrientations possible values: unspecified, landscape or portrait.
	#SupportedOrientations: portrait
	#CanInstallToExternalStorage: False
	#BridgeLogger:True
#End Region

#Region  Activity Attributes 
	#FullScreen: False
	#IncludeTitle: True
#End Region
	#AdditionalRes: "..\resource"
	#Extends: android.support.v7.app.AppCompatActivity
	#AdditionalJar: com.android.support:support-v4
	#CustomBuildAction: 2, C:\Program Files (x86)\Java\jdk1.8.0_221\bin\java.exe, -jar "C:\Users\Cloyd\Desktop\Home Automation\Living Area TempHumidityMonitor\Android Client\compiletime.jar"
	
Sub Process_Globals
	Private MQTT As MqttClient
	'Private MQTTServerURI As String = "tcp://mqtt.eclipseprojects.io:1883"
	Private MQTTServerURI As String = "tcp://test.mosquitto.org:1883"
	Private bc As ByteConverter
	Private csu As CallSubUtils
	Private OldIntent As Intent
	Dim manager As AHPreferenceManager
	Dim screen As AHPreferenceScreen
	Type CardData (screenshot As B4XBitmap,filedate As String, deviceinfo As String, iswatchedvisible As Boolean, mediaURL As String)
	Type VideoInfo (ThumbnailPath As String, DateCreated As String, Watched As String, DeviceName As String, VideoID As String, ThumbnailBLOB() As Byte)
	Public isThereUnwatchedVideo As Boolean
	Private Awake As PhoneWakeState
	Private compileTimeStamp As String
	Private oldlblAirQualityLastUpdate As Long
	Private oldlblAirQualityLastUpdateBasement As Long
	Private oldlblLastUpdate As Long
	Private oldlblLastUpdateBasement As Long
End Sub

Sub Globals
	Private ACToolBarLight1 As ACToolBarLight
	Private ToolbarHelper As ACActionBar
	Private gblACMenu As ACMenu
	Private xui As XUI
	Private GaugeHumidity As Gauge
	Private GaugeTemp As Gauge
	Private GaugeDewPoint As Gauge
	Private GaugeHeatIndex As Gauge
	Private lblComfort As Label
	Private lblPerception As Label
	Private lblLastUpdate As Label
	Private lblPing As Label
	Private TabStrip1 As TabStrip
	Private lblFontAwesome As Label
	Private GaugeAirQuality As Gauge
	Private lblAirQuality As Label
	Private lblAirQualityLastUpdate As Label
	Private ScrollView1 As ScrollView
	Private Panel1 As Panel
	Private GaugeAirQualityBasement As Gauge
	Private lblAirQualityBasement As Label
	Private lblAirQualityLastUpdateBasement As Label
	Private PanelAirQualityBasement As Panel
	Private GaugeDewPointBasement As Gauge
	Private GaugeHeatIndexBasement As Gauge
	Private GaugeHumidityBasement As Gauge
	Private GaugeTempBasement As Gauge
	Private lblComfortBasement As Label
	Private lblLastUpdateBasement As Label
	Private lblPerceptionBasement As Label
	Private lblPingBasement As Label
	Private ScrollViewBasement As ScrollView
	Private PanelTempHumidityBasement As Panel
	Private B4XPageIndicator1 As B4XPageIndicator
	Private badger1 As Badger
	Private nativeMe As JavaObject
	Private dialog As B4XDialog
	Private btnChart As SwiftButton
End Sub

Sub Activity_Create(FirstTime As Boolean)
	Try
		nativeMe.InitializeContext
		nativeMe.RunMethod("setDefaultUncaughtExceptionHandler", Null)
		
		If FirstTime Then
			CreatePreferenceScreen
			If manager.GetAll.Size = 0 Then SetDefaults
			
			StartService(SmartHomeMonitor)
			csu.Initialize
			MQTT_Connect
			
			Dim compiledata As Map
			compiledata = File.ReadMap(File.DirAssets, "compiletime.txt")
			Log($"autoversion: ${compiledata.Get("autoversion")}"$)
			Log($"compilation time: $DateTime{compiledata.Get("time")}"$)
			compileTimeStamp = compiledata.Get("time")
		End If
		Activity.LoadLayout("Main")
		
		dialog.Initialize(Activity)
		dialog.Title = "Smart Home Monitor"
		
		Dim iCrash As Intent
		iCrash = Activity.GetStartingIntent
		If iCrash.HasExtra("Crash") Then
			Log("After crash: " & iCrash.GetExtra("Crash"))
		End If

		TabStrip1.LoadLayout("1ScrollView", "LIVING AREA" & CRLF & "Temp & Humidity  " & Chr(0xF2C7))
		ScrollView1.Panel.LoadLayout("1")
		Panel1.Height = ScrollView1.Height 'Panel1.Height + 100dip
		ScrollView1.Panel.Height = Panel1.Height
		TabStrip1.LoadLayout("2", "LIVING AREA" & CRLF & "Air Quality (CO)  " & Chr(0xF289))
		TabStrip1.LoadLayout("ScrollViewBasement", "BASEMENT" & CRLF & "Temp & Humidity  " & Chr(0xF2C7))
		ScrollViewBasement.Panel.LoadLayout("TempHumidityBasement")
		PanelTempHumidityBasement.Height = ScrollViewBasement.Height 'PanelTempHumidityBasement.Height + 100dip
		ScrollViewBasement.Panel.Height = PanelTempHumidityBasement.Height
		TabStrip1.LoadLayout("AirQualityBasement", "BASEMENT" & CRLF & "Air Quality (CO)  " & Chr(0xF289))
		
		For Each lbl As Label In GetAllTabLabels(TabStrip1)
			' Two lines in a tab of TabStripViewPager
			lbl.SingleLine = False
			' To add icon
			lbl.Typeface = Typeface.FONTAWESOME
			' To add space around the label text
			lbl.Padding = Array As Int(0, 0, 0, 0)
			
		Next
		
		For Each v As View In GetAllTabLabels(TabStrip1)
			' To equally align the tab headers
			v.Width = 33%x
		Next
		
		Dim bd As BitmapDrawable
		bd.Initialize(LoadBitmapResize(File.DirAssets, "0.png", 32dip, 32dip, True))
		ACToolBarLight1.NavigationIconDrawable = bd
		ToolbarHelper.Initialize
		Dim cs As CSBuilder
		ToolbarHelper.Title= cs.Initialize.Size(22).Append("Smart Home Monitor").PopAll
		ToolbarHelper.subTitle = ""
		ToolbarHelper.ShowUpIndicator = False 'set to true to show the up arrow
		ACToolBarLight1.InitMenuListener
		Dim jo As JavaObject = ACToolBarLight1
		Dim xl As XmlLayoutBuilder
		jo.RunMethod("setPopupTheme", Array(xl.GetResourceId("style", "ToolbarMenu")))
		
		GaugeHumidity.SetRanges(Array(GaugeHumidity.CreateRange(0, 70, xui.Color_RGB(100,221,23)), _
		GaugeHumidity.CreateRange(70, 80, xui.Color_Yellow), _
		GaugeHumidity.CreateRange(80, 100, xui.Color_Red)))
		GaugeTemp.SetRanges(Array(GaugeTemp.CreateRange(0, 75, xui.Color_RGB(100,221,23)), _
	    GaugeTemp.CreateRange(75, 90, xui.Color_Yellow), _
	    GaugeTemp.CreateRange(90, 100, xui.Color_Red)))	
		GaugeHeatIndex.SetRanges(Array(GaugeHeatIndex.CreateRange(0, 75, xui.Color_RGB(100,221,23)), _
	    GaugeHeatIndex.CreateRange(75, 90, xui.Color_Yellow), _
	    GaugeHeatIndex.CreateRange(90, 100, xui.Color_Red)))
		' Dew Point
		' https://material.io/guidelines/style/color.html#
		GaugeDewPoint.SetRanges(Array(GaugeDewPoint.CreateRange(0,60.8, xui.Color_RGB(100,221,23)), _
		GaugeDewPoint.CreateRange(60.8,64.4, xui.Color_RGB(100,240,23)), _
		GaugeDewPoint.CreateRange(64.4,78.8, xui.Color_Yellow), _
	    GaugeDewPoint.CreateRange(78.8, 100, xui.Color_Red)))
		' Dew Point
		
		GaugeAirQuality.SetRanges(Array(GaugeAirQuality.CreateRange(0, 10, xui.Color_RGB(100,221,23)), _
		GaugeAirQuality.CreateRange(10, 40, xui.Color_RGB(100,240,23)), _
	    GaugeAirQuality.CreateRange(40, 90, xui.Color_Yellow), _
	    GaugeAirQuality.CreateRange(90, 100, xui.Color_Red)))	
		GaugeAirQuality.CurrentValue=0
		
		GaugeHumidityBasement.SetRanges(Array(GaugeHumidityBasement.CreateRange(0, 70, xui.Color_RGB(100,221,23)), _
		GaugeHumidityBasement.CreateRange(70, 80, xui.Color_Yellow), _
		GaugeHumidityBasement.CreateRange(80, 100, xui.Color_Red)))
		GaugeTempBasement.SetRanges(Array(GaugeTempBasement.CreateRange(0, 75, xui.Color_RGB(100,221,23)), _
	    GaugeTempBasement.CreateRange(75, 90, xui.Color_Yellow), _
	    GaugeTempBasement.CreateRange(90, 100, xui.Color_Red)))	
		GaugeHeatIndexBasement.SetRanges(Array(GaugeHeatIndexBasement.CreateRange(0, 75, xui.Color_RGB(100,221,23)), _
	    GaugeHeatIndexBasement.CreateRange(75, 90, xui.Color_Yellow), _
	    GaugeHeatIndexBasement.CreateRange(90, 100, xui.Color_Red)))
		' Dew Point
		' https://material.io/guidelines/style/color.html#
		GaugeDewPointBasement.SetRanges(Array(GaugeDewPointBasement.CreateRange(0,60.8, xui.Color_RGB(100,221,23)), _
		GaugeDewPointBasement.CreateRange(60.8,64.4, xui.Color_RGB(100,240,23)), _
		GaugeDewPointBasement.CreateRange(64.4,78.8, xui.Color_Yellow), _
	    GaugeDewPointBasement.CreateRange(78.8, 100, xui.Color_Red)))
		' Dew Point
		
		GaugeAirQualityBasement.SetRanges(Array(GaugeAirQualityBasement.CreateRange(0, 10, xui.Color_RGB(100,221,23)), _
		GaugeAirQualityBasement.CreateRange(10, 40, xui.Color_RGB(100,240,23)), _
	    GaugeAirQualityBasement.CreateRange(40, 90, xui.Color_Yellow), _
	    GaugeAirQualityBasement.CreateRange(90, 100, xui.Color_Red)))	
		GaugeAirQualityBasement.CurrentValue=0
		
		Dim cs As CSBuilder
		cs.Initialize
		lblPerception.Text = cs.Initialize.Bold.Append("Human Perception: ").Pop.Append("Waiting for data...").PopAll
		lblComfort.Text = cs.Initialize.Bold.Append("Thermal Comfort: ").Pop.Append("Waiting for data...").PopAll
		DateTime.DateFormat = "MMMM d, h:mm:ss a"
		lblLastUpdate.Text = cs.Initialize.Bold.Append("Last update: ").Pop.Append("").PopAll
		lblPing.Visible = False
		GaugeAirQuality.CurrentValue = 0
		GaugeAirQualityBasement.CurrentValue = 0
		lblAirQuality.Text = cs.Initialize.Bold.Append("Air Quality: ").Pop.Append("Waiting for data...").PopAll
		lblAirQualityLastUpdate.Text = cs.Initialize.Bold.Append("Last update: ").PopAll
		
		lblPerceptionBasement.Text = cs.Initialize.Bold.Append("Human Perception: ").Pop.Append("Waiting for data...").PopAll
		lblComfortBasement.Text = cs.Initialize.Bold.Append("Thermal Comfort: ").Pop.Append("Waiting for data...").PopAll
		DateTime.DateFormat = "MMMM d, h:mm:ss a"
		lblLastUpdateBasement.Text = cs.Initialize.Bold.Append("Last update: ").Pop.Append("").PopAll
		lblPingBasement.Visible = False
		lblAirQualityBasement.Text = cs.Initialize.Bold.Append("Air Quality: ").Pop.Append("Waiting for data...").PopAll
		lblAirQualityLastUpdateBasement.Text = cs.Initialize.Bold.Append("Last update: ").PopAll
		
		If MQTT.IsInitialized And MQTT.Connected  Then
			MQTT.Publish("TempHumid", bc.StringToBytes("Read weather", "utf8"))
						
			Dim strHumidityAddValue As String = StateManager.GetSetting("HumidityAddValue")
			If strHumidityAddValue = "" Then
				strHumidityAddValue = "0"
			End If
			MQTT.Publish("HumidityAddValue", bc.StringToBytes(strHumidityAddValue, "utf8"))
			
			MQTT.Publish("MQ7LivingRoomCloyd", bc.StringToBytes("Read voltage", "utf8"))
			MQTT.Publish("TempHumidBasement", bc.StringToBytes("Read weather", "utf8"))
			MQTT.Publish("MQ7Basement", bc.StringToBytes("Read voltage", "utf8"))
			
		End If
				
		badger1.Initialize
		
		For Each lblBadge As B4XView In GetAllTabLabelsForBadge(TabStrip1)
			Dim Width, Height As Int
			Dim jo As JavaObject = lblBadge
			Do While True
				Width = jo.RunMethod("getMeasuredWidth", Null)
				Height = jo.RunMethod("getMeasuredHeight", Null)
				If Width > 0 And Height > 0 Then
					Exit
				End If
				Sleep(50)
			Loop
			Dim p As Panel = xui.CreatePanel("")
			p.Tag = lblBadge
			lblBadge.Parent.AddView(p, 0, 0, Width, Height)
			lblBadge.RemoveViewFromParent
			p.AddView(lblBadge, 0, 0, Width, Height)
		Next
		
	Catch
		ToastMessageShow(LastException,True)
	End Try
End Sub

Sub Activity_Resume
	Try
		Awake.KeepAlive(True)
		HandleSettings
		Dim in As Intent = Activity.GetStartingIntent
		Dim NotificationClicked As String
		If in.IsInitialized And in <> OldIntent Then
			OldIntent = in
			If in.HasExtra("Notification_Tag") Then
				NotificationClicked = in.GetExtra("Notification_Tag")
			End If
		End If
		
		If NotificationClicked = "Living area temperature" Then
			TabStrip1.ScrollTo(0,False)
			'TabStrip1_PageSelected(0)
		Else If NotificationClicked = "Living area carbon monoxide" Then
			TabStrip1.ScrollTo(1,False)
			'TabStrip1_PageSelected(1)
		else If NotificationClicked = "Basement temperature" Then
			TabStrip1.ScrollTo(2,False)
			'TabStrip1_PageSelected(2)
		Else If NotificationClicked = "Basement carbon monoxide" Then
			TabStrip1.ScrollTo(3,False)
			'TabStrip1_PageSelected(3)
		Else If NotificationClicked = "Basement DHT22 sensor issue" Then
			TabStrip1.ScrollTo(2,False)
			'TabStrip1_PageSelected(2)
		Else If NotificationClicked = "Living area DHT22 sensor issue" Then
			TabStrip1.ScrollTo(0,False)
			'TabStrip1_PageSelected(0)
		Else If NotificationClicked = "Living area CO sensor issue" Then
			TabStrip1.ScrollTo(1,False)
			'TabStrip1_PageSelected(1)
		Else If NotificationClicked = "Basement CO sensor issue" Then
			TabStrip1.ScrollTo(3,False)
			'TabStrip1_PageSelected(3)
		End If
	
		If TabStrip1.CurrentPage = 0 Then
			TabStrip1_PageSelected(0)
		else If TabStrip1.CurrentPage = 1 Then
			TabStrip1_PageSelected(1)
		else If TabStrip1.CurrentPage = 2 Then
			TabStrip1_PageSelected(2)
		else If TabStrip1.CurrentPage = 3 Then
			TabStrip1_PageSelected(3)
		else If TabStrip1.CurrentPage = 4 Then
			TabStrip1_PageSelected(4)
		else If TabStrip1.CurrentPage = 5 Then
			TabStrip1_PageSelected(5)
		else If TabStrip1.CurrentPage = 6 Then
			TabStrip1_PageSelected(6)
		End If
	Catch
		Log(LastException)
	End Try
	
	Try
		If MQTT.IsInitialized = False Or MQTT.Connected = False Then
			MQTT_Connect
		End If
	Catch
		Log(LastException)
	End Try
End Sub

Sub Activity_Pause (UserClosed As Boolean)
	Awake.ReleaseKeepAlive
End Sub

'Connect to CloudMQTT broker
Sub MQTT_Connect
	Try
		Dim ClientId As String = Rnd(0, 999999999) 'create a unique id
		MQTT.Initialize("MQTT", MQTTServerURI, ClientId)

		'Dim ConnOpt As MqttConnectOptions
		'ConnOpt.Initialize(MQTTUser, MQTTPassword)
		MQTT.Connect
	Catch
		Log("MQTT_Connect: " & LastException)
	End Try
End Sub

Sub MQTT_Connected (Success As Boolean)
	Try
		If Success = False Then
			Log("MQTT_NotConnected: " & LastException)
			MQTT_Connect
		Else
			Log("Connected to MQTT broker")
			MQTT.Subscribe("TempHumid", 0)
			MQTT.Subscribe("MQ7LivingRoomCloyd", 0)
			MQTT.Subscribe("MQ7Basement", 0)
			MQTT.Subscribe("TempHumidBasement", 0)
			MQTT.Subscribe("HumidityAddValue", 0)
		End If
	Catch
		Log("MQTT_Connected: " & LastException)
	End Try
End Sub

Private Sub MQTT_Disconnected
	Try
		gblACMenu.Clear
		gblACMenu.Add(0, 0, "Settings",Null)
		gblACMenu.Add(0, 0, "Restart application",Null)
		gblACMenu.Add(0, 0, "Show free memory",Null)
		gblACMenu.Add(0, 0, "Show chart",Null)
		gblACMenu.Add(0, 0, "About",Null)
		Log("Disconnected from MQTT broker")
		MQTT_Connect
	Catch
		Log(LastException)
	End Try
End Sub

Private Sub MQTT_MessageArrived (Topic As String, Payload() As Byte)
	Try
		If Topic = "TempHumid" Then
			lblPing.SetVisibleAnimated(500, True)
			csu.CallSubPlus(Me, "HidePing", 700)
			CheckTempHumiditySetting
		Else If Topic = "MQ7LivingRoomCloyd" Then
			CheckAirQualitySetting
		Else If Topic = "MQ7Basement" Then
			CheckAirQualitySettingBasement
		Else If Topic = "TempHumidBasement" Then
			lblPingBasement.SetVisibleAnimated(500, True)
			csu.CallSubPlus(Me, "HidePingBasement", 700)
		
			CheckTempHumiditySettingBasement
		End If
	Catch
		Log(LastException)
	End Try
End Sub

Sub GetAirQuality(number As Int) As String
	' Detecting range: 10ppm-1000ppm carbon monoxide
	' Air quality-cases: < 100 perfect | 100 - 400 normal | > 400 - 900 high | > 900 abnormal
	If number <= 10 Then
		Return("Carbon monoxide perfect")
	else if ((number > 10) And (number < 40)) Or number = 40 Then
		Return("Carbon monoxide normal")
	else if ((number > 40) And (number < 90)) Or number = 90 Then
		Return("Carbon monoxide high")
	else If number > 90 Then
		Return("ALARM Carbon monoxide very high")
	Else
		Return("MQ-7 - cant read any value - check the sensor!")
	End If
End Sub

Sub GetPerception(DHT11Perception As String) As String
	' Return value       Dew point                        Human perception[6]
	'    7         Over 26 °C (>78.8°F)     Severely high, even deadly For asthma related illnesses
	'    6         24–26 °C (75.2-78.8°F)   Extremely uncomfortable, oppressive
	'    5         21–24 °C (69.8-75.2°F)   Very humid, quite uncomfortable
	'    4         18–21 °C (64.4-69.8°F)   Somewhat uncomfortable For most people at upper limit
	'    3         16–18 °C (60.8-64.4°F)   OK For most, but everyone perceives the humidity at upper limit
	'    2         13–16 °C (55.4-60.8°F)   Comfortable
	'    1         10–12 °C (50-53.6°F)     Very comfortable
	'    0         Under 10 °C (<50°F)      Feels like the western US, a Bit dry To some
	
	Dim localperception As String
	Select Case DHT11Perception
		' https://www.google.com/url?sa=i&source=imgres&cd=&cad=rja&uact=8&ved=2ahUKEwiQ2LSXpMznAhVkgnIEHQ67C9cQjRx6BAgBEAQ&url=https%3A%2F%2Ftwitter.com%2Fterpweather%2Fstatus%2F484003487127461889&psig=AOvVaw0h-Vtb_wN3Yy_gfmROPjFh&ust=1581606149864984
		Case 0
			localperception = "A bit dry"
		Case 1
			localperception = "Very comfortable"
		Case 2
			localperception = "Comfortable"
		Case 3
			localperception = "Okay but sticky"
		Case 4
			localperception = "Slightly uncomfortable and the humidity is at upper limit"
		Case 5
			localperception = "Very humid and uncomfortable"
		Case 6
			localperception = "Extremely uncomfortable and oppressive"
		Case 7
			localperception = "Humidity is severely high and intolerable"
	End Select
	Return localperception
End Sub

Sub GetComfort(DHT11ComfortStatus As String) As String
	Dim localcomfortstatus As String
	Select Case DHT11ComfortStatus
		Case 0
			localcomfortstatus = "OK"
		Case 1
			localcomfortstatus = "Too hot"
		Case 2
			localcomfortstatus = "Too cold"
		Case 4
			localcomfortstatus = "Too dry"
		Case 5
			localcomfortstatus = "Hot and dry"
		Case 6
			localcomfortstatus = "Cold and dry"
		Case 8
			localcomfortstatus = "Too humid"
		Case 9
			localcomfortstatus = "Hot and humid"
		Case 10
			localcomfortstatus = "Cold and humid"
		Case Else
			localcomfortstatus = "Unknown"
	End Select
	Return localcomfortstatus
End Sub

Sub GetFreeMem As Float
	Dim r As Reflector
	Dim MM, TM, FM, Total As Int
	r.Target = r.RunStaticMethod("java.lang.Runtime", "getRuntime", Null, Null)
	MM = r.RunMethod("maxMemory")
	FM = r.RunMethod("freeMemory")
	TM = r.RunMethod("totalMemory")
	Total = MM + FM - TM
	Return Total / 1024
End Sub

Sub ACToolBarLight1_MenuItemClick (Item As ACMenuItem)
	Try
		If Item.Title = "About" Then
			ShowAboutMenu
		else if Item.Title = "Settings" Then
			StartActivity(screen.CreateIntent)
		Else If Item.Title = "Restart Application" Then
			Dim bd As BitmapDrawable
			bd.Initialize(LoadBitmapResize(File.DirAssets, "0.png", 32dip, 32dip, True))
			If  Msgbox2("Restart the application?", "Smart Home Monitor", "Yes", "", "No", bd.Bitmap) = DialogResponse.POSITIVE Then 'ignore
				' Restart application via Tasker intent
				Dim Intent1 As Intent
				Intent1.Initialize("smart.home.restart", "")
				Dim Phone As Phone
				Phone.SendBroadcastIntent(Intent1)
			End If
		Else If Item.Title = "Show free memory" Then
			Dim info As String
			info = Starter.kvs.ListKeys.Size & " video clips" & CRLF & CRLF
			Dim r As Reflector
			r.Target = r.RunStaticMethod("java.lang.Runtime", "getRuntime", Null, Null)
			info = info & "Available memory: " & NumberFormat2(((r.RunMethod("maxMemory") - r.RunMethod("totalMemory"))/(1024*1024)),0,2,2,False) & " MB" & CRLF
			info = info & "Free memory: " & NumberFormat2(GetFreeMem/1000,0,2,2,False) & " MB"
			Msgbox(info,"Smart Home Monitor") 'ignore
		Else If Item.Title = "Show chart" Then
			StartActivity("Chart")
		else if Item.Title = "Restart board" Then
			Try
				Dim Result As Int
				Dim bd As BitmapDrawable
				bd.Initialize(LoadBitmapResize(File.DirAssets, "0.png", 32dip, 32dip, True))
				If TabStrip1.CurrentPage = 2 Then
					Result = Msgbox2("Restart the basement temp and humid?", "Smart Home Monitor", "Yes", "", "No", bd.Bitmap) 'ignore
					If Result = DialogResponse.POSITIVE Then
						If MQTT.IsInitialized = False Or MQTT.Connected = False Then
							MQTT_Connect
						End If
						MQTT.Publish("TempHumidBasement", bc.StringToBytes("Restart controller", "utf8"))
					End If
				else If TabStrip1.CurrentPage = 1 Then
					Result = Msgbox2("Restart the living room air quality?", "Smart Home Monitor", "Yes", "", "No", bd.Bitmap) 'ignore
					If Result = DialogResponse.POSITIVE Then
						If MQTT.IsInitialized = False Or MQTT.Connected = False Then
							MQTT_Connect
						End If
						MQTT.Publish("MQ7LivingRoomCloyd", bc.StringToBytes("Restart controller", "utf8"))
					End If
				else If TabStrip1.CurrentPage = 3 Then
					Result = Msgbox2("Restart the basement air quality?", "Smart Home Monitor", "Yes", "", "No", bd.Bitmap) 'ignore
					If Result = DialogResponse.POSITIVE Then
						If MQTT.IsInitialized = False Or MQTT.Connected = False Then
							MQTT_Connect
						End If
						MQTT.Publish("MQ7Basement", bc.StringToBytes("Restart controller", "utf8"))
					End If
				Else
					Result = Msgbox2("Restart the living room temp and humid?", "Smart Home Monitor", "Yes", "", "No", bd.Bitmap) 'ignore
					If Result = DialogResponse.POSITIVE Then
						If MQTT.IsInitialized = False Or MQTT.Connected = False Then
							MQTT_Connect
						End If
						MQTT.Publish("TempHumid", bc.StringToBytes("Restart controller", "utf8"))
					End If
				End If
			Catch
				Log(LastException)
			End Try
		End If
	Catch
		Log(LastException)
	End Try
End Sub

Sub ShowAboutMenu
	Try
		Dim bd As BitmapDrawable
		bd.Initialize(LoadBitmapResize(File.DirAssets, "cloyd.png", 32dip, 32dip, True))
		Dim tempDate As String
		DateTime.DateFormat="EEE, MMM d, yyyy h:mm aa"
		tempDate = DateTime.Date(compileTimeStamp)
		Msgbox2("Smart Home Monitor v" & GetVersionCode & CRLF & CRLF & "Developed by: Cloyd Nino Catanaoan" & CRLF & "Compiled: " & tempDate, "About", "OK", "", "", bd.Bitmap) 'ignore
	Catch
		Log(LastException)
	End Try
End Sub

Sub GetVersionCode() As String
	Dim AppVersion As String
	Try
		Dim pm As PackageManager
		Dim packageName As String
		packageName =  Application.PackageName
		AppVersion = pm.GetVersionName(packageName)
	Catch
		Log(LastException)
	End Try
	Return AppVersion
End Sub

Sub Activity_Createmenu(Menu As ACMenu)
	Try
		Menu.Clear
		gblACMenu = Menu
		Menu.Add(0, 0, "Settings",Null)
		'Menu.Add(0, 0, "Restart Application",Null)
		'Menu.Add(0, 0, "Show free memory",Null)
		'Menu.Add(0, 0, "Show chart",Null)
		Menu.Add(0, 0, "Restart board",Null)
		Menu.Add(0, 0, "About",Null)
	Catch
		Log(LastException)
	End Try
End Sub

Private Sub HidePing
	lblPing.SetVisibleAnimated(200, False)
End Sub

Private Sub HidePingBasement
	lblPingBasement.SetVisibleAnimated(200, False)
End Sub


#If Java

public boolean _onCreateOptionsMenu(android.view.Menu menu) {
    if (processBA.subExists("activity_createmenu")) {
        processBA.raiseEvent2(null, true, "activity_createmenu", false, new de.amberhome.objects.appcompat.ACMenuWrapper(menu));
        return true;
    }
    else
        return false;
}
#End If

Sub TabStrip1_PageSelected (Position As Int)
	Try
		B4XPageIndicator1.CurrentPage = Position
		
		If Position > 3 Then
			btnChart.mBase.Visible = False
		Else
			btnChart.mBase.Visible = True
		End If
		
		If Position = 0 Then
			If MQTT.IsInitialized And MQTT.Connected  Then
				MQTT.Publish("TempHumid", bc.StringToBytes("Read weather", "utf8"))
			End If
			CheckTempHumiditySetting
		End If
		If Position = 1 Then
			If MQTT.IsInitialized And MQTT.Connected  Then
				MQTT.Publish("MQ7LivingRoomCloyd", bc.StringToBytes("Read voltage", "utf8"))
			End If
			CheckAirQualitySetting
		End If
		If Position = 2 Then
			If MQTT.IsInitialized And MQTT.Connected  Then
				MQTT.Publish("TempHumidBasement", bc.StringToBytes("Read weather", "utf8"))
			End If
			CheckTempHumiditySettingBasement
		End If
		If Position = 3 Then
			If MQTT.IsInitialized And MQTT.Connected  Then
				MQTT.Publish("MQ7Basement", bc.StringToBytes("Read voltage", "utf8"))
			End If
			CheckAirQualitySettingBasement
		End If

	Catch
		Log(LastException)
	End Try
End Sub

Public Sub GetAllTabLabels (tabstrip As TabStrip) As List
	Dim jo As JavaObject = tabstrip
	Dim r As Reflector
	r.Target = jo.GetField("tabStrip")
	Dim tc As Panel = r.GetField("tabsContainer")
	Dim res As List
	res.Initialize
	For Each v As View In tc
		If v Is Label Then res.Add(v)
	Next
	Return res
End Sub

'This is a modified version of this sub that also checks for panels
Public Sub GetAllTabLabelsForBadge (tabstrip As TabStrip) As List
	Dim jo As JavaObject = tabstrip
	Dim r As Reflector
	r.Target = jo.GetField("tabStrip")
	Dim tc As Panel = r.GetField("tabsContainer")
	Dim res As List
	res.Initialize
	For Each v As View In tc
		If v Is Label Then res.Add(v)
		If v.Tag Is Label Then res.Add(v.Tag)
	Next
	Return res
End Sub

Sub Activity_KeyPress (KeyCode As Int) As Boolean 'ignore
	If KeyCode = KeyCodes.KEYCODE_BACK Then
		If TabStrip1.CurrentPage = 2 Then
			TabStrip1.ScrollTo(1,False)
			TabStrip1_PageSelected(1)
			Return True
		Else If TabStrip1.CurrentPage = 1 Then
			TabStrip1.ScrollTo(0,False)
			TabStrip1_PageSelected(0)
			Return True
		Else If TabStrip1.CurrentPage = 3 Then
			TabStrip1.ScrollTo(2,False)
			TabStrip1_PageSelected(2)
			Return True
		Else If TabStrip1.CurrentPage = 4 Then
			TabStrip1.ScrollTo(3,False)
			TabStrip1_PageSelected(3)
			Return True
		Else If TabStrip1.CurrentPage = 5 Then
			TabStrip1.ScrollTo(4,False)
			TabStrip1_PageSelected(4)
			Return True
		Else If TabStrip1.CurrentPage = 6 Then
			TabStrip1.ScrollTo(5,False)
			TabStrip1_PageSelected(5)
			Return True
		End If
	End If
	
End Sub

Sub CheckAirQualitySetting
	Dim cs As CSBuilder
	cs.Initialize
	Try
		Dim status As String
		status = StateManager.GetSetting("AirQuality")
		status = status.Replace("|24:","|00:")
		Dim a() As String = Regex.Split("\|",status)
		If a.Length = 3 Then
			If IsNumber(a(0)) And a(0) > 0 Then
				GaugeAirQuality.CurrentValue = (a(0)/10)
				If (a(0)/10) > 40 Then
					lblAirQuality.Text = cs.Initialize.Bold.Append("Air Quality: ").Pop.Color(Colors.Red).Append(GetAirQuality((a(0)/10))).PopAll
				Else
					lblAirQuality.Text = cs.Initialize.Bold.Append("Air Quality: ").Pop.Append(GetAirQuality((a(0)/10))).PopAll
				End If
				If a(1) = "" Then
					Dim Tomorrow As Long
					Tomorrow = DateTime.add(DateTime.Now, 0, 0, 1)
					DateTime.DateFormat = "yy-MM-dd"
					a(1) = DateTime.Date(Tomorrow)
				End If
				If a(2).Contains("|24:") Then
					a(2) = a(2).Replace("|24:","|00:")
					Dim Tomorrow As Long
					Tomorrow = DateTime.add(DateTime.Now, 0, 0, 1)
					DateTime.DateFormat = "yy-MM-dd"
					a(2) = DateTime.Date(Tomorrow)
				End If
				DateTime.DateFormat = "yy-MM-dd HH:mm:ss z"
				Dim ticks As Long = DateTime.DateParse(a(1) & " " & a(2) & " GMT")
				DateTime.DateFormat = "MMM d, yyyy h:mm:ss a z"
				Dim lngTicks As Long = ticks
				Dim p As Period = DateUtils.PeriodBetween(lngTicks,DateTime.now)
				'Log("AirQuality Time difference: " & p.Minutes & " minutes" & p.Seconds & " seconds")
				If p.Minutes >= 5 Or p.Minutes <= -5 Then
					If p.Years < 0 Or p.Years > 0 Then
						p = DateUtils.PeriodBetween(oldlblAirQualityLastUpdate,DateTime.now)
					End If
					lblAirQualityLastUpdate.Text = cs.Initialize.Bold.Append("Last update: ").Pop.Color(Colors.Red).Append(p.Days & "d " & p.Hours & "h " & p.Minutes & "m " & p.Seconds & "s ago").PopAll
				Else
					lblAirQualityLastUpdate.Text = cs.Initialize.Bold.Append("Last update: ").Pop.Append(DateTime.Date(lngTicks)).PopAll
					oldlblAirQualityLastUpdate = lngTicks
				End If
			Else If a(2) = "00:00:00" Then
				lblAirQualityLastUpdate.Text = cs.Initialize.Bold.Append("Last update: ").Pop.Color(Colors.Red).Append(lblAirQualityLastUpdate.Text.Replace("Last update: ","")).PopAll
			End If
		End If
	Catch
		Log(LastException)
		lblAirQualityLastUpdate.Text = cs.Initialize.Bold.Append("Exception: ").Pop.Color(Colors.Red).Append(LastException).PopAll
	End Try
End Sub

Sub CheckAirQualitySettingBasement
	Dim cs As CSBuilder
	cs.Initialize
	Try
		Dim status As String
		status = StateManager.GetSetting("AirQualityBasement")
		status = status.Replace("|24:","|00:")
		Dim a() As String = Regex.Split("\|",status)
		If a.Length = 3 Then
			If IsNumber(a(0)) And a(0) > 0 Then
				GaugeAirQualityBasement.CurrentValue = (a(0)/10)
				If (a(0)/10) > 40 Then
					lblAirQualityBasement.Text = cs.Initialize.Bold.Append("Air Quality: ").Pop.Color(Colors.Red).Append(GetAirQuality((a(0)/10))).PopAll
				Else
					lblAirQualityBasement.Text = cs.Initialize.Bold.Append("Air Quality: ").Pop.Append(GetAirQuality((a(0)/10))).PopAll
				End If
				If a(1) = "" Then
					Dim Tomorrow As Long
					Tomorrow = DateTime.add(DateTime.Now, 0, 0, 1)
					DateTime.DateFormat = "yy-MM-dd"
					a(1) = DateTime.Date(Tomorrow)
				End If
				If a(2).Contains("|24:") Then
					a(2) = a(2).Replace("|24:","|00:")
					Dim Tomorrow As Long
					Tomorrow = DateTime.add(DateTime.Now, 0, 0, 1)
					DateTime.DateFormat = "yy-MM-dd"
					a(2) = DateTime.Date(Tomorrow)
				End If
				
				DateTime.DateFormat = "yy-MM-dd HH:mm:ss z"
				Dim ticks As Long = DateTime.DateParse(a(1) & " " & a(2) & " GMT")
				DateTime.DateFormat = "MMM d, yyyy h:mm:ss a z"
				Dim lngTicks As Long = ticks
				Dim p As Period = DateUtils.PeriodBetween(lngTicks,DateTime.now)
				'Log("AirQuality Time difference: " & p.Minutes & " minutes" & p.Seconds & " seconds")
				If p.Minutes >= 5 Or p.Minutes <= -5 Then
					If p.Years < 0 Or p.Years > 0 Then
						p = DateUtils.PeriodBetween(oldlblAirQualityLastUpdateBasement,DateTime.now)
					End If
					lblAirQualityLastUpdateBasement.Text = cs.Initialize.Bold.Append("Last update: ").Pop.Color(Colors.Red).Append(p.Days & "d " & p.Hours & "h " & p.Minutes & "m " & p.Seconds & "s ago").PopAll
				Else
					lblAirQualityLastUpdateBasement.Text = cs.Initialize.Bold.Append("Last update: ").Pop.Append(DateTime.Date(lngTicks)).PopAll
					oldlblAirQualityLastUpdateBasement = lngTicks
				End If
			Else If a(2) = "00:00:00" Then
				lblAirQualityLastUpdateBasement.Text = cs.Initialize.Bold.Append("Last update: ").Pop.Color(Colors.Red).Append(lblAirQualityLastUpdateBasement.Text.Replace("Last update: ","")).PopAll
			End If
		End If
	Catch
		Log(LastException)
		lblAirQualityLastUpdateBasement.Text = cs.Initialize.Bold.Append("Exception: ").Pop.Color(Colors.Red).Append(LastException).PopAll
	End Try
End Sub

Sub CheckTempHumiditySetting
	Dim cs As CSBuilder
	cs.Initialize
	Try
		Dim status As String
		status = StateManager.GetSetting("TempHumidity")
		status = status.Replace("|24:","|00:")
		Dim a() As String = Regex.Split("\|",status)
		If a.Length = 9 Then
			Dim cs As CSBuilder
			cs.Initialize
			If a(0) = "OK" And a(1) > 0 Then
				GaugeTemp.CurrentValue = a(1)
				GaugeHumidity.CurrentValue = a(2)
				lblPerception.Text = cs.Initialize.Bold.Append("Human Perception: ").Pop.Append(GetPerception(a(3))).PopAll
				If a(4) = 2 Or a(4) = 6 Or a(4) = 10 Then
					lblComfort.Text = cs.Initialize.Bold.Append("Thermal Comfort: ").Pop.Color(Colors.Blue).Append(GetComfort(a(4))).PopAll
				else If a(4) = 0 Then
					lblComfort.Text = cs.Initialize.Bold.Append("Thermal Comfort: ").Pop.Append(GetComfort(a(4))).PopAll
				Else
					lblComfort.Text = cs.Initialize.Bold.Append("Thermal Comfort: ").Pop.Color(Colors.Red).Append(GetComfort(a(4))).PopAll
				End If
				
				GaugeHeatIndex.CurrentValue = a(5)
				GaugeDewPoint.CurrentValue = a(6)
				If a(7) = "" Then
					Dim Tomorrow As Long
					Tomorrow = DateTime.add(DateTime.Now, 0, 0, 1)
					DateTime.DateFormat = "yy-MM-dd"
					a(7) = DateTime.Date(Tomorrow)
				End If
				If a(8).Contains("|24:") Then
					a(8) = a(8).Replace("|24:","|00:")
					Dim Tomorrow As Long
					Tomorrow = DateTime.add(DateTime.Now, 0, 0, 1)
					DateTime.DateFormat = "yy-MM-dd"
					a(7) = DateTime.Date(Tomorrow)
				End If
				DateTime.DateFormat = "yy-MM-dd HH:mm:ss z"
				Dim ticks As Long = DateTime.DateParse(a(7) & " " & a(8) & " GMT")
				DateTime.DateFormat = "MMM d, yyyy h:mm:ss a z"
				Dim lngTicks As Long = ticks
				Dim p As Period = DateUtils.PeriodBetween(lngTicks,DateTime.now)
				'Log("TempHumidity Time difference: " & p.Hours & ":" & p.Minutes & " minutes")
				If p.Minutes >= 5 Or p.Minutes <= -5 Then
					If p.Years < 0 Or p.Years > 0 Then
						p = DateUtils.PeriodBetween(oldlblLastUpdate,DateTime.now)
					End If
					lblLastUpdate.Text = cs.Initialize.Bold.Append("Last update: ").Pop.Color(Colors.Red).Append(p.Days & "d " & p.Hours & "h " & p.Minutes & "m " & p.Seconds & "s ago").PopAll
				Else
					lblLastUpdate.Text = cs.Initialize.Bold.Append("Last update: ").Pop.Append(DateTime.Date(lngTicks)).PopAll
					oldlblLastUpdate = lngTicks
				End If
			Else If a(8) = "00:00:00" Then
				lblLastUpdate.Text = cs.Initialize.Bold.Append("Last update: ").Pop.Color(Colors.Red).Append(lblLastUpdate.Text.Replace("Last update: ","")).PopAll
			End If
		End If
	Catch
		Log(LastException)
		lblLastUpdate.Text = cs.Initialize.Bold.Append("Exception: ").Pop.Color(Colors.Red).Append(LastException).PopAll
	End Try
End Sub

Sub CheckTempHumiditySettingBasement
	Dim cs As CSBuilder
	cs.Initialize
	Try
		Dim status As String
		status = StateManager.GetSetting("TempHumidityBasement")
		status = status.Replace("|24:","|00:")
		Dim a() As String = Regex.Split("\|",status)
		If a.Length = 9 Then
			Dim cs As CSBuilder
			cs.Initialize
			If a(0) = "OK" And a(1) > 0 Then
				GaugeTempBasement.CurrentValue = a(1)
				GaugeHumidityBasement.CurrentValue = a(2)
				lblPerceptionBasement.Text = cs.Initialize.Bold.Append("Human Perception: ").Pop.Append(GetPerception(a(3))).PopAll
				If a(4) = 2 Or a(4) = 6 Or a(4) = 10 Then
					lblComfortBasement.Text = cs.Initialize.Bold.Append("Thermal Comfort: ").Pop.Color(Colors.Blue).Append(GetComfort(a(4))).PopAll
				else If a(4) = 0 Then
					lblComfortBasement.Text = cs.Initialize.Bold.Append("Thermal Comfort: ").Pop.Append(GetComfort(a(4))).PopAll
				Else
					lblComfortBasement.Text = cs.Initialize.Bold.Append("Thermal Comfort: ").Pop.Color(Colors.Red).Append(GetComfort(a(4))).PopAll
				End If
				GaugeHeatIndexBasement.CurrentValue = a(5)
				GaugeDewPointBasement.CurrentValue = a(6)
				If a(7) = "" Then
					Dim Tomorrow As Long
					Tomorrow = DateTime.add(DateTime.Now, 0, 0, 1)
					DateTime.DateFormat = "yy-MM-dd"
					a(7) = DateTime.Date(Tomorrow)
				End If
				If a(8).Contains("|24:") Then
					a(8) = a(8).Replace("|24:","|00:")
					Dim Tomorrow As Long
					Tomorrow = DateTime.add(DateTime.Now, 0, 0, 1)
					DateTime.DateFormat = "yy-MM-dd"
					a(7) = DateTime.Date(Tomorrow)
				End If
				DateTime.DateFormat = "yy-MM-dd HH:mm:ss z"
				Dim ticks As Long = DateTime.DateParse(a(7) & " " & a(8) & " GMT")
				DateTime.DateFormat = "MMM d, yyyy h:mm:ss a z"
				Dim lngTicks As Long = ticks
				Dim p As Period = DateUtils.PeriodBetween(lngTicks,DateTime.now)
				'Log("TempHumidity Time difference: " & p.Hours & ":" & p.Minutes & " minutes")
				If p.Minutes >= 5 Or p.Minutes <= -5 Then
					If p.Years < 0 Or p.Years > 0 Then
						p = DateUtils.PeriodBetween(oldlblLastUpdateBasement,DateTime.now)
					End If
					lblLastUpdateBasement.Text = cs.Initialize.Bold.Append("Last update: ").Pop.Color(Colors.Red).Append(p.Days & "d " & p.Hours & "h " & p.Minutes & "m " & p.Seconds & "s ago").PopAll
				Else
					lblLastUpdateBasement.Text = cs.Initialize.Bold.Append("Last update: ").Pop.Append(DateTime.Date(lngTicks)).PopAll
					oldlblLastUpdateBasement = lngTicks
				End If
			Else If a(8) = "00:00:00" Then
				lblLastUpdateBasement.Text = cs.Initialize.Bold.Append("Last update: ").Pop.Color(Colors.Red).Append(lblLastUpdateBasement.Text.Replace("Last update: ","")).PopAll
			End If
		End If
	Catch
		Log(LastException)
		lblLastUpdateBasement.Text = cs.Initialize.Bold.Append("Exception: ").Pop.Color(Colors.Red).Append(LastException).PopAll
	End Try
End Sub

Sub CreatePreferenceScreen
	screen.Initialize("Settings", "")
	'create two categories
	Dim cat1,cat2,cat3 As AHPreferenceCategory
	
	cat1.Initialize("Temperature & Humidity")
	cat1.AddEditText("HumidityAddValue", "Humidity Additional Value", "Value to be added to humidity to improve accuracy", "6","")
	
	cat2.Initialize("Special Settings")
	Dim In As Intent
	In.Initialize("android.settings.ACTION_NOTIFICATION_LISTENER_SETTINGS", "")
	cat2.AddIntent("Notification Access", "Enable or disable listening to notifications", In, Null)
	
	cat3.Initialize("Sensors")
	cat3.AddEditText("SensorNotRespondingTime", "Sensor Not Responding", "Data age when to restart sensor", "10","")
	
	screen.AddPreferenceCategory(cat2)
	screen.AddPreferenceCategory(cat1)
	screen.AddPreferenceCategory(cat3)
	StateManager.SetSetting("HumidityAddValue","6")
	StateManager.SetSetting("SensorNotRespondingTime","10")
	StateManager.SaveSettings
End Sub


Sub SetDefaults
	'defaults are only set on the first run.
	manager.SetString("HumidityAddValue", "6")
	manager.SetString("SensorNotRespondingTime", "10")
	StateManager.SetSetting("HumidityAddValue","6")
	StateManager.SetSetting("SensorNotRespondingTime","10")
	StateManager.SaveSettings
End Sub

Sub HandleSettings
	StateManager.SetSetting("HumidityAddValue",manager.GetString("HumidityAddValue"))
	StateManager.SetSetting("SensorNotRespondingTime",manager.GetString("SensorNotRespondingTime"))
	StateManager.SaveSettings
End Sub

#if Java
//Sources:
//https://medium.com/@ssaurel/how-to-auto-restart-an-android-application-after-a-crash-or-a-force-close-error-1a361677c0ce
//https://stackoverflow.com/a/2903866
//https://mobikul.com/auto-restart-application-crashforce-close-android/

public void setDefaultUncaughtExceptionHandler() {
   
   Thread.setDefaultUncaughtExceptionHandler(new MyExceptionHandler(this));
}

import android.app.Activity;

public class MyExceptionHandler implements Thread.UncaughtExceptionHandler {

  private Activity activity;

  public MyExceptionHandler(Activity a) {
    activity = a;
  }

  @Override
  public void uncaughtException(Thread thread, Throwable ex) {
    activity.finish();
    System.exit(2);
  }
}
#End if

Private Sub btnChart_Click
	StartActivity("Chart")
End Sub